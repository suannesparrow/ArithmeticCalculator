//MP1 
//This file contains the Arithmethic class.
//You should implement the requesed methods.
using System;
using System.Text;
using System.Threading.Channels;
using System.Linq.Expressions;

namespace MP1
{
    public class Arithmetic
    {
        /// <summary>
        /// Use this method as is.
        /// It is called by Main and is used to get an expression from console.
        /// The method calls the EvaluateExpression and OutputExpression methods. 
        /// </summary>
        /// <returns>
        /// A string formed from the formatted expression and the evaluation 
        /// result, or the error message "Invalid expression".
        /// </returns>
        public static string BasicArithmetic()
        {
            Console.WriteLine();
            Console.WriteLine("Basic arithmetic opertions with + - * / ^");
            Console.WriteLine("Enter an expression:");
            string expression = Console.ReadLine().Trim();
            Console.WriteLine($"{OutputExpression(expression)}");
            double result = EvaluateExpression(expression);
            if (double.IsNaN(result))
                return "Invalid expression";
            return $"{OutputExpression(expression)} = {result}";
        }
        /// <summary>
        /// Return the numerical evaluation of the arithmetic expression passed to it.
        /// 
        /// Prcedence of the operators (from highest to lowest):
        ///    parenthesis
        ///    power
        ///    multiplication and division (equal precedence)
        ///    addition and subtraction (equal precedence)
        /// An inner parentheses has higher precedence.
        /// * and / have the same precedence.
        /// + and - have the same precedence.
        /// 
        /// All rithmetic operators are left-associative.
        /// 
        /// - can be used as the negative sign as well as subtraction.
        /// There must not be any space between the negative sign and the number.
        /// + is only used for addition (i.e. is not allowed to be used as a positive sign)
        /// </summary>
        /// <param name="expression">
        /// The user input string (with Trim() already applied)
        /// </param>
        /// <returns>
        /// Returns the result of a successful evaluation of the expression,
        /// or double.NaN if the expression is not valid.
        /// </returns>
        /// <example>
        /// If the user expression is "2.1 + 3" or "2.1+ 3" or "2.1 +3", 
        /// then the method returns 5.1
        /// If the user expression is "(8 + -3) * (2 ^ 5)" or "(8 + -3) * 2 ^ 5", 
        /// then the method returns 160 
        /// If the user expression is "2 + ((3 * 2) * 5)" it returns 32 
        /// A 0 before decimal point is not mandatory, so .52 is equivalent to 0.52
        /// Any extra spaces are fine, so if the user enters "  2   ^ 3 ", then 
        /// the method returns 8
        /// If the user input is any incorrect or unbalanced expression, for example,
        /// "4 5" or "4 +" or "+4" or " (4 + 5" or "4 + 5 * 4)", then the method 
        /// returns double.NaN
        /// </example>
        public static double EvaluateExpression(string expression)
        {
            //to implement
            StringBuilder organizedExpression = new StringBuilder();
            Stack<string> operatorStack = new Stack<string>();
            Queue<string> output = new Queue<string>();
            List<string> numbers = new List<string>();
            StringBuilder num = new StringBuilder();
            Stack<string> calculation = new Stack<string>();

            int x = 0;
            double aa;
            double bb;
            double add;
            double calc;
            double evaluation = 0;



            foreach (char element in OutputExpression(expression)) //spacing out brackets equally(needs this step for algorithim to function preperly)
            {
                if (element != '(' && element != ')')
                {
                    organizedExpression.Append(element);
                }
                if (element == '(')
                {
                    organizedExpression.Append(element);
                    organizedExpression.Append(' ');
                }
                if (element == ')')
                {
                    organizedExpression.Append(' ');
                    organizedExpression.Append(element);
                }

            }
            Console.WriteLine(organizedExpression);

            for (int i = 0; i < organizedExpression.Length; i++) //returns double.NaN id expression is unbalanced
            {
                if (organizedExpression[i] == '(' || organizedExpression[i] == ')')
                {
                    x++;
                }
            }

            if (x % 2 != 0)
            {
                return double.NaN;
            }

            for (int i = 0; i < organizedExpression.Length; i++) //creating a list of a string of numbers and operators the user input called numbers
            {
                if (organizedExpression[i] != ' ')
                {
                    num.Append(organizedExpression[i]);
                }

                else
                {
                    numbers.Add(num.ToString());
                    num.Clear();
                }

            }
           

            for (int i = 0; i <= numbers.Count; i++) //shunting yard algorithim thats puts input in reverse polish notion
            {
                if (i == numbers.Count)
                {
                    foreach (string element in operatorStack)
                    {
                        output.Enqueue(element);
                    }
                }
                else if (numbers[i] != "+" && numbers[i] != "-" && numbers[i] != "/" && numbers[i] != "*" && numbers[i] != "(" && numbers[i] != ")" && numbers[i] != "^")
                {
                    output.Enqueue(numbers[i]);
                }

                else if (numbers[i] != ")")

                {
                    if (operatorStack.Count == 0)
                    {
                        operatorStack.Push(numbers[i]);
                    }
                    else if (operatorStack.Peek() == "(")
                    {
                        operatorStack.Push(numbers[i]);
                    }
                    else if (numbers[i] == "(")
                    {
                        operatorStack.Push(numbers[i]);
                    }
                    else if (operatorStack.Peek() == "+" || operatorStack.Peek() == "-") //elements with lowest precedences
                    {
                        if (numbers[i] == "*" || numbers[i] == "/" || numbers[i] == "^") //elements with higher precedences
                        {
                            operatorStack.Push(numbers[i]);
                        }
                        else if (numbers[i] == "+" || numbers[i] == "-") //elements with equal precedence as + -
                        {


                            for (int s = 0; s < operatorStack.Count; s++)
                            {
                                if (operatorStack.ElementAt(s) != "(")
                                {
                                    output.Enqueue(operatorStack.ElementAt(s));
                                    operatorStack.Pop();
                                }
                                else if (operatorStack.ElementAt(s) == "(")
                                {
                                    break;
                                }
                            }
                            operatorStack.Push(numbers[i]);
                        }
                    }

                    else if (operatorStack.Peek() == "*" || operatorStack.Peek() == "/")
                    {
                        if (numbers[i] == "^")
                        {
                            operatorStack.Push(numbers[i]);
                        }
                        else
                        {

                        }
                        for (int s = 0; s < operatorStack.Count; s++)
                        {
                            if (operatorStack.ElementAt(s) != "(")
                            {
                                output.Enqueue(operatorStack.ElementAt(s));
                                operatorStack.Pop();
                            }
                            else if (operatorStack.ElementAt(s) == "(")
                            {
                                break;
                            }
                        }
                        operatorStack.Push(numbers[i]);
                    }

                    else if (operatorStack.Peek() == "^")
                    {
                        for (int s = 0; s < operatorStack.Count; s++)
                        {
                            if (operatorStack.ElementAt(s) != "(")
                            {
                                output.Enqueue(operatorStack.ElementAt(s));
                                operatorStack.Pop();
                            }
                            else if (operatorStack.ElementAt(s) == "(")
                            {
                                break;
                            }
                        }
                        operatorStack.Push(numbers[i]);
                    }
                }

                else if (numbers[i] == ")")
                {

                    for (int s = 0; s < operatorStack.Count; s = s)
                    {
                        if (operatorStack.ElementAt(s) != "(")
                        {
                            output.Enqueue(operatorStack.ElementAt(s));
                            operatorStack.Pop();
                        }
                        else if (operatorStack.ElementAt(s) == "(")
                        {
                            operatorStack.Pop();
                            break;
                        }

                    }

                }
            }

            foreach (string element in output)
            {
                Console.Write(element);
            }

            for (int j = 0; j < output.Count; j++) //calculates the expression in reverse polish notation
            {
                if (output.ElementAt(j) != "+" && output.ElementAt(j) != "-" && output.ElementAt(j) != "*" && output.ElementAt(j) != "/" && output.ElementAt(j) != "^")
                {
                    calculation.Push(output.ElementAt(j));
                }


                else
                {
                    string b = calculation.Pop();
                    string a = calculation.Pop();

                    if (output.ElementAt(j) == "+")
                    {
                        if (Double.TryParse(a, out aa) && Double.TryParse(b, out bb))
                        {
                            add = aa + bb;
                            calculation.Push(add.ToString());
                        }

                    }

                    else if (output.ElementAt(j) == "-")
                    {
                        if (Double.TryParse(a, out aa) && Double.TryParse(b, out bb))
                        {
                            add = aa - bb;
                            calculation.Push(add.ToString());
                        }

                    }

                    else if (output.ElementAt(j) == "*")
                    {
                        if (Double.TryParse(a, out aa) && Double.TryParse(b, out bb))
                        {
                            add = aa * bb;
                            calculation.Push(add.ToString());
                        }
                    }
                    else if (output.ElementAt(j) == "/")
                    {
                        if (Double.TryParse(a, out aa) && Double.TryParse(b, out bb))
                        {
                            add = aa / bb;
                            calculation.Push(add.ToString());
                        }
                    }
                    else if (output.ElementAt(j) == "^")
                    {
                        if (Double.TryParse(a, out aa) && Double.TryParse(b, out bb))
                        {
                            add = Math.Pow(aa, bb);
                            calculation.Push(add.ToString());
                        }

                    }
                }
            }
            /*Console.WriteLine(" ");
            foreach (string element in calculation)
            {
                Console.Write(element);
            }*/
            foreach (string element in calculation)
            {
                string h = element;
                if (Double.TryParse(h, out calc))
                {
                    evaluation = calc;
                }
            }
            return evaluation;

        }
        /// <summary>
        /// Returns a modestly cleaned up version of the input expression 
        /// </summary>
        /// <param name="expression">
        /// The user input string (with Trim() already applied)
        /// </param>
        /// <returns>
        /// Returns a string that is rather similar to the expression the user entered, with: 
        /// All extra spaces are removed, but it is ensured that a space is on the either sides of any binary arithmetic operator.
        /// For any negative number being subtracted from another number, it is changed to the addition with its absolute value.
        /// for any negative number being added to another number, it is changed to the subtraction of its absolute value.
        /// </returns>
        /// <example>
        /// If the expression is "2.1 + 3" or "2.1+3" or "2.1+ 3" or "2.1 +3" or "2.1 +    3" 
        ///       then the method returns "2.1 + 3".
        /// If the expression is "2.1 - 3" or "2.1-3" or "2.1- 3" or "2.1 -3" or "2.1 -    3" 
        ///       then the method returns "2.1 - 3".
        /// If the expression is "2.1 + -3" or "2.1+-3" or "2.1 - 3"  
        ///       then the method returns "2.1 - 3".
        /// If the expression is "2.1 - -3" or "2.1--3" or "2.1 + 3"  
        ///       then the method returns "2.1 + 3".
        /// If the expression is "2.1 *   -3" or "2.1*-3"  
        ///       then the method returns "2.1 * -3".
        /// If the expression is "( 2 +  3 )   * 2 ^ 5"
        ///       it returns "(2 + 3) * 2 ^ 5" 
        /// If the expression is "2 + ( ( 3 * 2) *  5)" it returns "2 + ((3 * 2) * 5)" 
        /// Any extra spaces are fine, so if the original user input is "  2   ^ 3 " then 
        ///     the method returns "2 ^ 3".
        /// </example>
        public static string OutputExpression(string expression)
        {
            StringBuilder organize = new StringBuilder(); //initializes empty StringBuilder named organize

            StringBuilder tempList = new StringBuilder();

            foreach (var item in expression)
            {
                //Creates list without spaces
                if (item != ' ') tempList.Append(item);

            }
            for (int j = 0; j < tempList.Length; j++)
            {
                //Removes -- and +-
                if ((tempList[j] == '-' && tempList[j + 1] == '-') || (tempList[j] == '+' && tempList[j + 1] == '-'))
                {
                    tempList.Remove(j, 1);
                }
            }

            expression = tempList.ToString();


            for (int i = 0; i < expression.Length; i++)
            {
                //no space if first number negative "-2 + 3"
                //if (i != 0 && expression[i] != '-') organize.Append('-');


                //Adds spaces on either side of +,*,/, and ^
                if (expression[i] == '+' || expression[i] == '*' || expression[i] == '/' || expression[i] == '^')
                {
                    organize.Append(' ');
                    organize.Append(expression[i]);
                    organize.Append(' ');
                }
                //Only adds space on either side of - if its a stand alone operation
                else if ((expression[i] == '-' && i != 0) && (expression[i - 1] != '*' || expression[i - 1] != '/'))
                {
                    organize.Append(' ');
                    organize.Append('-');
                    organize.Append(' ');
                }

                //Adds zero infront of decimal, ".25" to "0.25" for example
                else if (expression[i] == '.' && (expression[i - 1] == '+' || expression[i - 1] == '*' || expression[i - 1] == '/' || expression[i - 1] == '^' || expression[i - 1] == '-'))
                {
                    organize.Append('0');
                    organize.Append('.');
                }
                else organize.Append(expression[i]);


            }
            organize.Append(" ");
            return organize.ToString();

        }
        //You may add helper methods below here. Follow the specs and document well.
    }
}
